{
  "version": 3,
  "sources": [
    "../../node_modules/browser-pack/_prelude.js",
    "../src/about.js",
    "../src/lib/$.js",
    "../../node_modules/form-serialize/index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import serialize from 'form-serialize'\nimport $ from './lib/$'\n\n$('.ajax-form').on('submit', formHandler)\n\nfunction formHandler (e) {\n  e.preventDefault()\n\n  // clear any previous form errors\n  $('.js-form-input').removeClass('input-error')\n  $('.js-alert').addClass('hide').removeClass('alert-error')\n\n  var form = e.target\n  var data = serialize(form, {empty: true, hash: false})\n\n  // open a new POST request to the form endpoint\n  var r = new XMLHttpRequest()\n  r.open('POST', form.action, true)\n  r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n  r.setRequestHeader('X-CSRFToken', document.querySelector('body').getAttribute('data-csrftoken'))\n  r.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n  r.onload = () => {\n    // server returns 204 No Content for success, so a reponse body means error\n    if (r.response) {\n      var response = JSON.parse(r.response)\n      var errorObject = response[0] || response\n      showError(errorObject, form)\n    } else {\n      showSuccess(form)\n    }\n  }\n  r.onerror = () => showError({error: `XMLHttpRequest Error: ${r.statusText}`})\n  r.send(data)\n}\n\nfunction showError (response, form) {\n  var input = form.querySelector(`[name=\"${response.field}\"]`)\n  var alert = form.querySelector('.js-alert')\n  if (input) {\n    input.classList.add('input-error')\n  }\n  alert.innerHTML = response.error\n  alert.classList.add('alert-error')\n  alert.classList.remove('hide')\n}\n\nfunction showSuccess (form) {\n  var alert = form.querySelector('.js-alert')\n  alert.innerHTML = 'Success! Thanks for your input!'\n  alert.classList.remove('hide')\n  form.reset()\n}\n\n",
    "/**\n* Create a new array like object of dom elements\n*/\nfunction Query () {\n  /**\n  * Apply a function to every element in collection\n  * @param {Function} fn Function to apply to every element\n  * @return Query\n  */\n  this.each = (fn) => {\n    this.forEach(fn)\n    return this\n  }\n  /**\n  * Add a class to selected elements\n  * @param {String} className The class name to add\n  */\n  this.addClass = className => this.each(e => e.classList.add(className))\n  /**\n  * Remove a class from selected elements\n  * @param {String} className The class name to remove\n  */\n  this.removeClass = className => this.each(e => e.classList.remove(className))\n  /**\n  * Toggle a class from selected elements\n  * @param {String} className The class name to toggle\n  */\n  this.toggleClass = className => this.each(e => e.classList.toggle(className))\n  /**\n  * Attach an event listener with a callback to the selected elements\n  * Automatically removes listner if it already exists to avoid duplicates\n  * @param {String}   event    Name of event, eg. \"click\", \"mouseover\", etc...\n  * @param {Function} callback The function to call when the event is triggered\n  */\n  this.on = (event, fn) => {\n    this.each(e => {\n      e.removeEventListener(event, fn, false)\n      e.addEventListener(event, fn, false)\n    })\n  }\n  /**\n  * Remove an event listener with a callback to the selected elements\n  * @param {String}   event    Name of event, eg. \"click\", \"mouseover\", etc...\n  * @param {Function} callback The function to call when the event is triggered\n  */\n  this.off = (event, fn) => this.each(e => e.removeEventListener(event, fn, false))\n}\n\nQuery.prototype = Array.prototype\n\nlet $ = selector => {\n  var collection = new Query()\n  if (selector.nodeType) {\n    collection.push(selector)\n  } else {\n    collection.push(...document.querySelectorAll(selector))\n  }\n  return collection\n}\n\nexport default $\n",
    "// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i;\n\n// node names which could be successful controls\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;\n\n// Matches bracket notation.\nvar brackets = /(\\[[^\\[\\]]*\\])/g;\n\n// serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\nfunction serialize(form, options) {\n    if (typeof options != 'object') {\n        options = { hash: !!options };\n    }\n    else if (options.hash === undefined) {\n        options.hash = true;\n    }\n\n    var result = (options.hash) ? {} : '';\n    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);\n\n    var elements = form && form.elements ? form.elements : [];\n\n    //Object store each radio and set if it's empty or not\n    var radio_store = Object.create(null);\n\n    for (var i=0 ; i<elements.length ; ++i) {\n        var element = elements[i];\n\n        // ingore disabled fields\n        if ((!options.disabled && element.disabled) || !element.name) {\n            continue;\n        }\n        // ignore anyhting that is not considered a success field\n        if (!k_r_success_contrls.test(element.nodeName) ||\n            k_r_submitter.test(element.type)) {\n            continue;\n        }\n\n        var key = element.name;\n        var val = element.value;\n\n        // we can't just use element.value for checkboxes cause some browsers lie to us\n        // they say \"on\" for value when the box isn't checked\n        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n            val = undefined;\n        }\n\n        // If we want empty elements\n        if (options.empty) {\n            // for checkbox\n            if (element.type === 'checkbox' && !element.checked) {\n                val = '';\n            }\n\n            // for radio\n            if (element.type === 'radio') {\n                if (!radio_store[element.name] && !element.checked) {\n                    radio_store[element.name] = false;\n                }\n                else if (element.checked) {\n                    radio_store[element.name] = true;\n                }\n            }\n\n            // if options empty is true, continue only if its radio\n            if (!val && element.type == 'radio') {\n                continue;\n            }\n        }\n        else {\n            // value-less fields are ignored unless options.empty is true\n            if (!val) {\n                continue;\n            }\n        }\n\n        // multi select boxes\n        if (element.type === 'select-multiple') {\n            val = [];\n\n            var selectOptions = element.options;\n            var isSelectedOptions = false;\n            for (var j=0 ; j<selectOptions.length ; ++j) {\n                var option = selectOptions[j];\n                var allowedEmpty = options.empty && !option.value;\n                var hasValue = (option.value || allowedEmpty);\n                if (option.selected && hasValue) {\n                    isSelectedOptions = true;\n\n                    // If using a hash serializer be sure to add the\n                    // correct notation for an array in the multi-select\n                    // context. Here the name attribute on the select element\n                    // might be missing the trailing bracket pair. Both names\n                    // \"foo\" and \"foo[]\" should be arrays.\n                    if (options.hash && key.slice(key.length - 2) !== '[]') {\n                        result = serializer(result, key + '[]', option.value);\n                    }\n                    else {\n                        result = serializer(result, key, option.value);\n                    }\n                }\n            }\n\n            // Serialize if no selected options and options.empty is true\n            if (!isSelectedOptions && options.empty) {\n                result = serializer(result, key, '');\n            }\n\n            continue;\n        }\n\n        result = serializer(result, key, val);\n    }\n\n    // Check for all empty radio buttons and serialize them with key=\"\"\n    if (options.empty) {\n        for (var key in radio_store) {\n            if (!radio_store[key]) {\n                result = serializer(result, key, '');\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction parse_keys(string) {\n    var keys = [];\n    var prefix = /^([^\\[\\]]*)/;\n    var children = new RegExp(brackets);\n    var match = prefix.exec(string);\n\n    if (match[1]) {\n        keys.push(match[1]);\n    }\n\n    while ((match = children.exec(string)) !== null) {\n        keys.push(match[1]);\n    }\n\n    return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n    if (keys.length === 0) {\n        result = value;\n        return result;\n    }\n\n    var key = keys.shift();\n    var between = key.match(/^\\[(.+?)\\]$/);\n\n    if (key === '[]') {\n        result = result || [];\n\n        if (Array.isArray(result)) {\n            result.push(hash_assign(null, keys, value));\n        }\n        else {\n            // This might be the result of bad name attributes like \"[][foo]\",\n            // in this case the original `result` object will already be\n            // assigned to an object literal. Rather than coerce the object to\n            // an array, or cause an exception the attribute \"_values\" is\n            // assigned as an array.\n            result._values = result._values || [];\n            result._values.push(hash_assign(null, keys, value));\n        }\n\n        return result;\n    }\n\n    // Key is an attribute name and can be assigned directly.\n    if (!between) {\n        result[key] = hash_assign(result[key], keys, value);\n    }\n    else {\n        var string = between[1];\n        var index = parseInt(string, 10);\n\n        // If the characters between the brackets is not a number it is an\n        // attribute name and can be assigned directly.\n        if (isNaN(index)) {\n            result = result || {};\n            result[string] = hash_assign(result[string], keys, value);\n        }\n        else {\n            result = result || [];\n            result[index] = hash_assign(result[index], keys, value);\n        }\n    }\n\n    return result;\n}\n\n// Object/hash encoding serializer.\nfunction hash_serializer(result, key, value) {\n    var matches = key.match(brackets);\n\n    // Has brackets? Use the recursive assignment function to walk the keys,\n    // construct any missing objects in the result tree and make the assignment\n    // at the end of the chain.\n    if (matches) {\n        var keys = parse_keys(key);\n        hash_assign(result, keys, value);\n    }\n    else {\n        // Non bracket notation can make assignments directly.\n        var existing = result[key];\n\n        // If the value has been assigned already (for instance when a radio and\n        // a checkbox have the same name attribute) convert the previous value\n        // into an array before pushing into it.\n        //\n        // NOTE: If this requirement were removed all hash creation and\n        // assignment could go through `hash_assign`.\n        if (existing) {\n            if (!Array.isArray(existing)) {\n                result[key] = [ existing ];\n            }\n\n            result[key].push(value);\n        }\n        else {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\n// urlform encoding serializer\nfunction str_serialize(result, key, value) {\n    // encode newlines as \\r\\n cause the html spec says so\n    value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n    value = encodeURIComponent(value);\n\n    // spaces should be '+' rather than '%20'.\n    value = value.replace(/%20/g, '+');\n    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;\n"
  ]
}